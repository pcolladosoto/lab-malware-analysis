; Subroutines regarding the management of users
%include "../libs/io_v6.asm"

; User data
    ; Surename -> A string of at most 64 chars
    ; First Name -> A string of at most 64 chars
    ; Dep -> Any of:
                ; Development
                ; IT Support
                ; Finance
                ; HR
        ; The largest string is "Development" which is 11 chars long!
    ; User ID -> In the form of pXXXXXXX, where XXXXXXX is a 7 digit number
    ; Email -> With the userID@helpdesk.co.uk ending

    ; The above suggests we need to reserve: (64 + 1) * 2 + (11 + 1) + (8 + 1) + (23 + 1) = 175 Bytes per user
    ; We then need to reserve 175 * 100 = 1750 bytes to fit all the user data

section .data

MAX_USERS equ 100
B_PER_USER equ 175
NAME_SIZE equ 65
DEP_SIZE equ 12
UID_SIZE equ 9
EMAIL_SIZE equ 24

curr_users:
    dq 0x0

user_data:
    resb MAX_USERS * B_PER_USER

users_full_msg:
    db "We already have 100 users...", 0xA, 0x0

surename_msg:
    db "Please enter a surename -> ", 0x0

firstname_msg:
    db "Please enter a first name -> ", 0x0

dep_msg:
    db "Please enter a department -> ", 0x0

uid_msg:
    db "Please enter a User ID -> ", 0x0

email_msg:
    db "Please enter an email -> ", 0x0

section .text

add_user:
    push rbp
    mov rbp, rsp
    sub rsp, 32
    push rdi

    ; mov rdi, QWORD foo
    ; call print_string_new

    mov rax, [curr_users]
    cmp rax, MAX_USERS
    je .full

    lea rbx, [user_data + rax * B_PER_USER]
    ; Note none of the functions we are about to call fiddle with RBX. Our address is safe!

    ; Get the surename
    mov rdi, QWORD surename_msg
    call print_string_new
    call read_string_new
    mov rsi, rax
    mov rdi, rbx
    call copy_string

    ; Get the first name
    lea rbx, [rbx + NAME_SIZE]
    mov rdi, QWORD firstname_msg
    call print_string_new
    call read_string_new
    mov rsi, rax
    mov rdi, rbx
    call copy_string

    ; Get the department
    lea rbx, [rbx + NAME_SIZE]
.getdep:
    mov rdi, QWORD dep_msg
    call print_string_new
    call read_string_new
    ; Validate results and add the constants in the data section!
    mov rsi, rax
    mov rdi, rbx
    call copy_string

    ; Update the number of users
    inc rax
    mov [curr_users], rax



.full:
    mov rdi, QWORD users_full_msg
    call print_string_new

    pop rdi
    add rsp, 32
    pop rbp

    ret

del_user:
    push rbp
    mov rbp, rsp
    sub rsp, 32
    push rdi

    mov rdi, QWORD fii
    call print_string_new

    pop rdi
    add rsp, 32
    pop rbp

    ret
